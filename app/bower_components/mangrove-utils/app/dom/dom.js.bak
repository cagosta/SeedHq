define(["invocation/invoke", "sleipnir/dom"], function(invoke, $){ "use strict"
    
    return {
        addEventListener: function(ael){
            if (ael)
              return function(el, ev, fn, c){
                  return el.addEventListener(ev, fn, !!c)
              }
        
            return function(el, ev, fn){
                return el.attachEvent('on'+ev, function(e){
                    var e = e || window.event
                    e.target = e.target || e.srcElement
                    e.relatedTarget = e.relatedTarget || e.fromElement || e.toElement
                    e.isImmediatePropagationStopped = e.isImmediatePropagationStopped || false
                    e.preventDefault = e.preventDefault || function(){
                        e.returnValue = false
                    }
                    e.stopPropagation = e.stopPropagation || function(){
                        e.cancelBubble = true
                    }
                    e.stopImmediatePropagation = e.stopImmediatePropagation || function(){
                        e.stopPropagation()
                        e.isImmediatePropagationStopped = true
                    }
                    if ( !e.isImmediatePropagationStopped )
                      fn(e)
                })
            }
        }("addEventListener" in window)
        
      , removeEventListener: function(rel){
            if (rel)
              return function(el, ev, fn, c){
                  return el.removeEventListener(ev, fn, !!c)
              }
        
            return function(el, ev, fn){
                el.detachEvent(ev, fn)
            }
        }("removeEventListener" in window)
      
      , contains: function (a, b){
            return a.contains ? a != b && a.contains(b)
                 : !!(a.compareDocumentPosition(b) & 16)
        }
        
      , expressNode: function(){
            return invoke($.NodeExpression.parse, arguments, $.NodeExpression)
        }
      , expressHTML: function(){
            return invoke($.HTMLExpression.parse, arguments, $.HTMLExpression)
        }
    }
    
})
